/**
 * @file L1-046 整除光棍.cpp
 * @date 2022-05-19
 */

/*
这里所谓的“光棍”，并不是指单身汪啦~ 说的是全部由1组成的数字，比如1、11、111、1111等。
传说任何一个光棍都能被一个不以5结尾的奇数整除。比如，111111就可以被13整除。 
现在，你的程序要读入一个整数x，这个整数一定是奇数并且不以5结尾。然后，经过计算，输出两个数字：
第一个数字s，表示x乘以s是一个光棍，第二个数字n是这个光棍的位数。
这样的解当然不是唯一的,题目要求你输出最小的解。

提示：一个显然的办法是逐渐增加光棍的位数，直到可以整除x为止。
但难点在于，s可能是个非常大的数 —— 比如，程序输入31，那么就输出3584229390681和15，
因为31乘以3584229390681的结果是111111111111111，一共15个1。

输入格式：
输入在一行中给出一个不以5结尾的正奇数x（<1000）。

输出格式：
在一行中输出相应的最小的s和n，其间以1个空格分隔。

输入样例：
31

输出样例：
3584229390681 15

代码长度限制
16 KB

时间限制
400 ms

内存限制
64 MB
*/

/* 这大概是数论方面的内容了，使用了除法的性质，模拟除法 */

#include <cstdio>
using namespace std;

int main() {

    int x = 0;
    scanf("%d", &x);

    int num = 1,    // 存储中间结果，余数等
        bitnum = 1; // 光棍数的位数
    bool f = false;

    while (true) {
        int t = num / x; // 这里每次都最多只会有1位

        if (f) // 避免前置0的输出
            printf("%d", t);
        else if (t) {
            f = true;
            printf("%d", t);
        }

        if (num % x == 0) // 到最后能够整除了
            break;
        num = (num % x) * 10 + 1; // 做除法的时候，若不能够整除，则余数右边会将被除数的更低的一位落下来，变成*10+1的样式，然后继续
        bitnum++;
    }

    printf(" %d", bitnum);

    return 0;
}