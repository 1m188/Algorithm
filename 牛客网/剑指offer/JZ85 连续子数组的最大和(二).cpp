/**
 * @file JZ85 连续子数组的最大和(二).cpp
 * @date 2022-05-13
 */

/*
描述
输入一个长度为n的整型数组array，数组中的一个或连续多个整数组成一个子数组，找到一个具有最大和的连续子数组。
1.子数组是连续的，比如[1,3,5,7,9]的子数组有[1,3]，[3,5,7]等等，但是[1,3,7]不是子数组
2.如果存在多个最大和的连续子数组，那么返回其中长度最长的，该题数据保证这个最长的只存在一个
3.该题定义的子数组的最小长度为1，不存在为空的子数组，即不存在[]是某个数组的子数组
4.返回的数组不计入空间复杂度计算

数据范围:
1<=n<=10^5
 
-100 <= a[i] <= 100

要求:时间复杂度O(n)，空间复杂度O(n)
进阶:时间复杂度O(n)，空间复杂度O(1)


示例1
输入：
[1,-2,3,10,-4,7,2,-5]

返回值：
[3,10,-4,7,2]

说明：
经分析可知，输入数组的子数组[3,10,-4,7,2]可以求得最大和为18，故返回[3,10,-4,7,2]   
示例2
输入：
[1]

返回值：
[1]

示例3
输入：
[1,2,-3,4,-1,1,-3,2]

返回值：
[1,2,-3,4,-1,1]

说明：
经分析可知，最大子数组的和为4，有[4],[4,-1,1],[1,2,-3,4],[1,2,-3,4,-1,1]，故返回其中长度最长的[1,2,-3,4,-1,1]   
示例4
输入：
[-2,-1]

返回值：
[-1]

说明：
子数组最小长度为1，故返回[-1]
*/

/* 动态规划，和只返回最大和的题目的做法一样，只不过在计算的过程中需要
一些中间变量来保存一些索引和长度之类的值 */

#include <vector>
using namespace std;

class Solution {
  public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param array int整型vector 
     * @return int整型vector
     */
    vector<int> FindGreatestSumOfSubArray(vector<int> &array) {
        // write code here

        int start = 0,        // 最终序列的开始索引
            len = 1,          // 最终序列的长度
            sum = array[0];   // 最终序列的最大和
        int n_start = 0,      // 当前序列的开始索引
            n_len = 1,        // 当前序列的长度
            n_sum = array[0]; // 当前序列的和

        for (int i = 1; i < array.size(); i++) {
            if (n_sum > sum || (n_sum == sum && n_len > len)) {
                start = n_start;
                len = n_len;
                sum = n_sum;
            }

            /* 精髓都在这里，动态规划，对于之前的和与当前的值，如果值+和比值还要大或等于，
            则当前值可能就是连续最大和的序列的一部分，如果值+和比值还要小，
            那就从值开始新的连续序列 */
            if (array[i] + n_sum >= array[i]) {
                n_len++;
                n_sum += array[i];
            } else {
                n_start = i;
                n_len = 1;
                n_sum = array[i];
            }
        }

        // 最后一段数组序列也不要忘记判断
        if (n_sum > sum || (n_sum == sum && n_len > len)) {
            start = n_start;
            len = n_len;
            sum = n_sum;
        }

        vector<int> ans;
        for (int i = start; i < start + len; i++)
            ans.push_back(array[i]);
        return ans;
    }
};