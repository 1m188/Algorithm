/*
标题：包子凑数

小明几乎每天早晨都会在一家包子铺吃早餐。他发现这家包子铺有N种蒸笼，其中第i种蒸笼恰好能放Ai个包子。每种蒸笼都有非常多笼，可以认为是无限笼。

每当有顾客想买X个包子，卖包子的大叔就会迅速选出若干笼包子来，使得这若干笼中恰好一共有X个包子。比如一共有3种蒸笼，分别能放3、4和5个包子。当顾客想买11个包子时，大叔就会选2笼3个的再加1笼5个的（也可能选出1笼3个的再加2笼4个的）。

当然有时包子大叔无论如何也凑不出顾客想买的数量。比如一共有3种蒸笼，分别能放4、5和6个包子。而顾客想买7个包子时，大叔就凑不出来了。

小明想知道一共有多少种数目是包子大叔凑不出来的。

输入
----
第一行包含一个整数N。(1 <= n <= 100)
以下N行每行包含一个整数Ai。(1 <= Ai <= 100) 

输出
---
一个整数代表答案。如果凑不出的数目有无限多个，输出INF。

例如，
输入：
2  
4  
5   

程序应该输出：
6  

再例如，
输入：
2  
4  
6    

程序应该输出：
INF

样例解释：
对于样例1，凑不出的数目包括：1, 2, 3, 6, 7, 11。  
对于样例2，所有奇数都凑不出来，所以有无限多个。  

资源约定：
峰值内存消耗（含虚拟机） < 256M
CPU消耗  < 1000ms


请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。

注意：
main函数需要返回0;
只使用ANSI C/ANSI C++ 标准;
不要调用依赖于编译环境或操作系统的特殊函数。
所有依赖的函数必须明确地在源文件中 #include <xxx>
不能通过工程设置而省略常用头文件。

提交程序时，注意选择所期望的语言类型和编译器类型。

*/

#include "iostream"
#include "vector"

//辗转相除判断最大公约数
int gcd(int a, int b)
{
    int c = a % b;
    while (c)
    {
        a = b;
        b = c;
        c = a % b;
    }
    return b;
}

int main()
{
    int n = 0;
    std::cin >> n;
    std::vector<int> a(n);
    for (int i = 0; i < n; i++)
    {
        std::cin >> a[i];
    }

    //判定INF，看任意两个数之间是否有互质，存在一对即有限，不然的话就无限
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            if (gcd(a[i], a[j]) == 1)
            {
                goto next;
            }
        }
    }
    std::cout << "INF";
    return 0;
next:

    //用一个较大的数组来做枚举，0是可以凑得出来的，小于的数都凑不出来，当某数减去某个可以凑出来的数可以被凑出来的话，则某数也可以被凑出来，
    //据此标记能否凑出来的数
    std::vector<bool> is(10000, false);
    is[0] = true;
    for (int i = 0; i < n; i++)
    {
        for (int j = 1; j < is.size(); j++)
        {
            if (a[i] <= j && is[j - a[i]])
            {
                is[j] = true;
            }
        }
    }

    //统计不能够被凑出来的数
    int num = 0;
    for (const bool &b : is)
    {
        if (!b)
        {
            num++;
        }
    }
    std::cout << num;

    return 0;
}