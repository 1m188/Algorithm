
// 你一定听说过“数独”游戏。
// 如【图1.png】，玩家需要根据9×9盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个同色九宫内的数字均含1-9，不重复。

// 数独的答案都是唯一的，所以，多个解也称为无解。

// 本图的数字据说是芬兰数学家花了3个月的时间设计出来的较难的题目。但对会使用计算机编程的你来说，恐怕易如反掌了。

// 本题的要求就是输入数独题目，程序输出数独的唯一解。我们保证所有已知数据的格式都是合法的，并且题目有唯一的解。

// 格式要求：
// 输入9行，每行9个数字，0代表未知，其它数字为已知。
// 输出9行，每行9个数字表示数独的解。

// 例如：
// 输入（即图中题目）：
// 005300000
// 800000020
// 070010500
// 400005300
// 010070006
// 003200080
// 060500009
// 004000030
// 000009700

// 程序应该输出：
// 145327698
// 839654127
// 672918543
// 496185372
// 218473956
// 753296481
// 367542819
// 984761235
// 521839764

// 再例如，输入：
// 800000000
// 003600000
// 070090200
// 050007000
// 000045700
// 000100030
// 001000068
// 008500010
// 090000400

// 程序应该输出：
// 812753649
// 943682175
// 675491283
// 154237896
// 369845721
// 287169534
// 521974368
// 438526917
// 796318452

// 资源约定：
// 峰值内存消耗 < 256M
// CPU消耗  < 2000ms

// 请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。

// 所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。

// 注意: main函数需要返回0
// 注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。
// 注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。

// 提交时，注意选择所期望的编译器类型。

#include <iostream>
#include <string>
#include <vector>

using namespace std;

vector<vector<int>> nums(9, vector<int>(9, 0));

void input()
{
    for (int i = 0; i < 9; i++)
    {
        string s;
        cin >> s;
        for (int j = 0; j < 9; j++)
            nums[i][j] = s[j] - '0';
    }
}

void print()
{
    for (const auto &vec : nums)
    {
        for (const int &n : vec)
            cout << n;
        cout << '\n';
    }
}

bool check(int x, int y, int n)
{
    for (int i = 0; i < 9; i++)
    {
        if (nums[x][i] == n || nums[i][y] == n)
            return false;
    }

    x = int(x / 3) * 3;
    y = int(y / 3) * 3;

    for (int i = x; i < x + 3; i++)
        for (int j = y; j < y + 3; j++)
            if (nums[i][j] == n)
                return false;

    return true;
}

void dfs(int x = 0, int y = 0)
{
    if (x >= 9)
    {
        print();
        return;
    }

    if (nums[x][y])
        dfs(x + (y + 1) / 9, (y + 1) % 9);
    else
    {
        for (int i = 1; i <= 9; i++)
        {
            if (check(x, y, i))
            {
                nums[x][y] = i;
                dfs(x + (y + 1) / 9, (y + 1) % 9);
                nums[x][y] = 0;
            }
        }
    }
}

int main()
{
    input();

    dfs();

    return 0;
}