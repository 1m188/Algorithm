'''
# 租用游艇

## 题目描述

长江游艇俱乐部在长江上设置了 $n$ 个游艇出租站 $1,2,\cdots,n$。游客可在这些游艇出租站租用游艇，并在下游的任何一个游艇出租站归还游艇。游艇出租站 $i$ 到游艇出租站 $j$ 之间的租金为 $r(i,j)$（$1\le i\lt j\le n$）。试设计一个算法，计算出从游艇出租站 $1$ 到游艇出租站 $n$ 所需的最少租金。

## 输入格式

第一行中有一个正整数 $n$，表示有 $n$ 个游艇出租站。接下来的 $n-1$ 行是一个半矩阵 $r(i,j)$（$1\le i<j\le n$）。

## 输出格式

输出计算出的从游艇出租站 $1$ 到游艇出租站 $n$ 所需的最少租金。

## 样例 #1

### 样例输入 #1

```
3
5 15
7
```

### 样例输出 #1

```
12
```

## 提示

$n\le 200$，保证计算过程中任何时刻数值都不超过 $10^6$。
'''
'''
动态规划，对于每个渡口，有两种情况，还船或者不还船，
假设dp[i]为从1渡口开始到i渡口的最小租金，则
dp[i] = min((j = 1 ~ i - 1) dp[j] + cost[j][i])
对于多次还船的情况，事实上，dp[i]已然是到i的最小租金，
如果还要还船，则i的租金未必会小于dp[i]
'''

MAX = 10**6 + 1

n = int(input())
cost = [[0 for _ in range(n + 1)] for _ in range(n + 1)]
for i in range(1, n):
    idx = i + 1
    for j in map(int, input().split()):
        cost[i][idx] = cost[idx][i] = j
        idx += 1

dp = [MAX for _ in range(n + 1)]
dp[1] = 0
for i in range(2, n + 1):
    for j in range(i - 1, 0, -1):
        dp[i] = min(dp[i], dp[j] + cost[j][i])
print(dp[n])
