/*
一个整数n的阶乘可以写成n!，它表示从1到n这n个整数的乘积。阶乘的增长速度非常快，例如，13！就已经比较大了，已经无法存放在一个整型变量中；
而35！就更大了，它已经无法存放在一个浮点型变量中。因此，当n比较大时，去计算n!是非常困难的。
幸运的是，在本题中，我们的任务不是去计算n!，而是去计算n!最右边的那个非0的数字是多少。
例如，5！=1*2*3*4*5=120，因此5!最右边的那个非0的数字是2。
再如，7！=5040，因此7！最右边的那个非0的数字是4。
再如，15！= 1307674368000，因此15！最右边的那个非0的数字是8。
请编写一个程序，输入一个整数n(0<n<=100)，然后输出n!最右边的那个非0的数字是多少。
输入：
　　7
输出：
　　4
*/

#include "iostream"

int main()
{
    int n = 0;
    std::cin >> n;

    //这里将每次的要乘的数算出来之后，去掉末尾所有的0，之后取后三位（考虑到后面有些可能需要进位的情况，只取1位或者2位的话精度不够）
    int num = 1;
    for (int i = 2; i <= n; i++)
    {
        num *= i;
        while (num % 10 == 0)
        {
            num /= 10;
        }
        num = num % 1000;
    }

    std::cout << num % 10;

    return 0;
}