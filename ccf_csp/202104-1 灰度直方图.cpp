/**
 * @file 202104-1 灰度直方图.cpp
 * @date 2022-08-26
 */

/*
试题编号：	202104-1
试题名称：	灰度直方图
时间限制：	1.0s
内存限制：	512.0MB
问题描述：	
问题描述
一幅长宽分别为  个像素和  个像素的灰度图像可以表示为一个  大小的矩阵 。
其中每个元素 （、）是一个  范围内的整数，表示对应位置像素的灰度值。
具体来说，一个  比特的灰度图像中每个像素的灰度范围是 。

一副灰度图像的灰度统计直方图（以下简称“直方图”）可以表示为一个长度为  的数组 ，其中 （）表示该图像中灰度值为  的像素个数。显然， 到  的总和应等于图像中的像素总数 。

已知一副图像的灰度矩阵 ，试计算其灰度直方图 。

输入格式
输入共  行。

输入的第一行包含三个用空格分隔的正整数 、 和 ，含义如前文所述。

第二到第  行输入矩阵 。
第 （）行包含用空格分隔的  个整数，依次为 。

输出格式
输出仅一行，包含用空格分隔的  个整数 ，表示输入图像的灰度直方图。

样例输入
4 4 16
0 1 2 3
4 5 6 7
8 9 10 11
12 13 14 15
Data
样例输出
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
Data
样例输入
7 11 8
0 7 0 0 0 7 0 0 7 7 0
7 0 7 0 7 0 7 0 7 0 7
7 0 0 0 7 0 0 0 7 0 7
7 0 0 0 0 7 0 0 7 7 0
7 0 0 0 0 0 7 0 7 0 0
7 0 7 0 7 0 7 0 7 0 0
0 7 0 0 0 7 0 0 7 0 0
Data
样例输出
48 0 0 0 0 0 0 29
Data
评测用例规模与约定
全部的测试数据满足  且 。
*/

#include <cstdio>
#include <vector>
using namespace std;

int n = 0, m = 0, l = 0;
vector<int> vec;

int main() {

    scanf("%d %d %d", &n, &m, &l);
    vec.resize(l);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int x = 0;
            scanf("%d", &x);
            vec[x]++;
        }
    }

    for (int i = 0; i < l; i++)
        printf("%d ", vec[i]);

    return 0;
}