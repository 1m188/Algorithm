'''
问题描述
试题编号：	202203-1
试题名称：	未初始化警告
时间限制：	1.0s
内存限制：	512.0MB
问题描述：	
题目背景
一个未经初始化的变量，里面存储的值可能是任意的。因此直接使用未初始化的变量，比如将其赋值给另一个变量，并不符合一般的编程逻辑。代码中出现这种情况，往往是因为遗漏了初始化语句、或是打错了变量名。对代码中使用了未初始化变量的语句进行检查，可以方便地排查出代码中的一些隐秘 Bug。

问题描述
考虑一段包含 
 条赋值语句的简单代码。该段代码最多使用到 
 个变量，分别记作 
；该段代码使用的常量均记作 
。

第 
 条（
）赋值语句为 
，满足 
、
，表示将 
 的值赋给变量 
。其中 
 被称为该赋值语句的左值，一定是个变量；
 被称为右值，可以是一个常量或变量。

对于任意一条赋值语句 
，如果右值 
 是一个变量，则其应该在此之前被初始化过。
具体来说，如果变量 
 在前 
 条赋值语句中做为左值出现过，即存在 
 满足 
（这里无需考虑第 
 条赋值语句本身是否也有右值未初始化的问题），我们就认为在第 
 条赋值语句中 
 已被初始化；
否则，我们认为该条语句存在右值未初始化的问题。

按照上述规则，试统计给定的代码中，有多少条赋值语句右值未被初始化。

输入格式
输入的第一行包含空格分隔的两个正整数 
、
，分别表示变量的数量和赋值语句的条数。

接下来输入 
 行，其中第 
 行（
）包含空格分隔的两个正整数 
、
，表示第 
 条赋值语句。

输出格式
输出一个整数，表示有右值未被初始化问题的赋值语句条数。

样例输入
10 7
1 2
3 3
3 0
3 3
6 2
2 1
8 2
Data
样例输出
3
Data
样例解释
其中第一、二、五条赋值语句右值未被初始化。

子任务
 的测试数据满足 
；

全部的测试数据满足 
。
'''

n, k = map(int, input().split())
variable = [False for _ in range(n + 1)]
variable[0] = True  # 常量为0，天然已经被初始化过
res = 0
for _ in range(k):
    left, right = map(int, input().split())
    if not variable[right]: res += 1
    variable[left] = True
print(res)
