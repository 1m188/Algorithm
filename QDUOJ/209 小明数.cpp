/**
 * @file 209 小明数.cpp
 * @date 2022-05-15
 */

/*
描述

小明比较喜欢研究各种各样的数字，有一天他发现了一类数，并将这些数命名为“小明数”，下面是“小明数”的定义：

数字的二进制由连续的k个1和连续的k-1个0组成。

比如：

1（二进制为：1，k=1）

6（二进制为：110，k=2）

120（二进制为：1111000，k=4）

496（二进制为：111110000，k=5）

现在给你一个数字n，求他所有的因子里最大的“小明数”。


输入
第1行：一个数T，表示后面用作输入测试的数的数量。（1 <= T <= 10^5)

第2 - T + 1行：每行1个数n。（1 <= n <= 10^5)


输出
共T行每行对应每个测试用例的结果


输入样例 1 

2
3
992
输出样例 1

1
496
*/

/*
1
6
28
120
496
2016
8128
32640
*/

/* 打表

我一开始是万万没想到10^5以内的小明数居然只有寥寥数个，最开始是从大到小先求因子，然后判断
是不是小明数，但是如果直接打表做的话就不必枚举因子，题目要求求因子里最大的小明数，那肯定
是一个小明数，直接从小明数里面判断是不是因子就可以了 */

#include <iostream>
using namespace std;

// 10^5以内的小明数
const int xiaoming_num[] = {32640, 8128, 2016, 496, 120, 28, 6, 1};

int main() {

    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int T = 0;
    cin >> T;

    while (T--) {
        int n = 0;
        cin >> n;

        for (const int &i : xiaoming_num)
            if (n % i == 0) { // 从小明数中找因子，肯定是小明数，只要判断因子
                cout << i << '\n';
                break;
            }
    }

    return 0;
}